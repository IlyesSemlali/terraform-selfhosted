# This makes sure that the volume is mounted in 600 mode
# for letsencrypt resolver to create its acme.json file
podSecurityContext:
  fsGroup: 65532
  fsGroupChangePolicy: "OnRootMismatch"

additionalArguments:
  - --certificatesresolvers.letsencrypt=true
  - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
  - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
  - --certificatesresolvers.letsencrypt.acme.storage=/certificates/acme.json

# Since we're using let's encrypt for certificate management
# We can't have two instances of traefik running at the same time
# Also the volume is in RWO mode, which also prevents HA
updateStrategy:
  type: Recreate
  rollingUpdate: null

ports:
  web:
    nodePort: 32080
  websecure:
    nodePort: 32443

persistence:
  enabled: false

deployment:
  additionalVolumes:
  - name: certificates
    persistentVolumeClaim:
      claimName: traefik-certificates

additionalVolumeMounts:
- name: certificates
  mountPath: /certificates

service:
  annotations:
    external-dns.alpha.kubernetes.io/hostname: "ingress.${domain}." # TODO: fetch this from a secret

ingressRoute:

  healthcheck:
    enabled: true
    entryPoints:
      - web

  dashboard:
    enabled: true
    annotations:
      external-dns.alpha.kubernetes.io/target: ingress.${domain} # TODO: fetch this from a secret

    matchRule: "Host(`traefik.${domain}`)"
    middlewares:
      - name: redirect-to-https
      - name: ak-outpost-forwardauth

    entryPoints:
      - web # needed for acme challeng
      - websecure

    tls:
      certResolver: letsencrypt

# TODO: either remove this or find a way to make this work
# certificatesResolvers:
#   letsencrypt:
#     acme:
#       httpChallenge:
#         entryPoint: web
#       storage: /certificates/acme.json

# On first Flux Bootstrap, CRDs don't exist, but traefik's
# Helm chart is thoughtfully designed to allow us to create
# Custom Resources when installing this HelmRelease
extraObjects:

  #################
  ## Middlewares ##
  #################

  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: redirect-to-https
      namespace: system
    spec:
      redirectScheme:
        scheme: https
        permanent: true

  ###################
  ## IngressRoutes ##
  ###################

  - apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      annotations:
        external-dns.alpha.kubernetes.io/target: ingress.${domain}
      labels:
        app.kubernetes.io/instance: authentik-system
        app.kubernetes.io/managed-by: Flux
        app.kubernetes.io/name: authentik
      name: authentik
      namespace: system
    spec:
      entryPoints:
      - web
      - websecure
      routes:
      - kind: Rule
        match: Host(`auth.${domain}`)
        middlewares:
        - name: redirect-to-https
        services:
        - kind: Service
          name: authentik-server
          port: 80
      tls:
        certResolver: letsencrypt
